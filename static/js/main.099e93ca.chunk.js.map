{"version":3,"sources":["app/reducers/machineDataReducer.ts","app/reducers/initialData.tsx","app/sagas/machineDataSaga.ts","app/sagas/index.ts","app/store.ts","app/components/CashOpertaionComponent.tsx","app/components/OperationComponent.tsx","app/components/ShopComponent.tsx","app/components/WithdrawComponent.tsx","App.tsx","index.tsx"],"names":["defaultState","products","withdraw","count","balance","initialData","name","price","value","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","_marked","getDataFromJson","_marked2","increaseMachineBalance","_marked3","decreaseMachineBalance","_marked4","changeMachineProduct","_marked5","getProductAndChangeData","_marked6","resetMachineData","_marked7","machineDataSaga","serverUrlAddress","_yield$call","data","productCount","_context","axios","get","concat","map","item","reduce","curr","put","payload","t0","message","_yield$select","_context2","select","machineData","post","changedWithdraw","cashValue","_yield$select2","changedProduct","_context3","_yield$select3","_context4","_yield$select4","_context5","_context6","_context7","all","takeLatest","sagas_regeneratorRuntime","sagas_marked","rootSaga","fork","rootReducer","combineReducers","arguments","action","objectSpread","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","CashOperationComponent","dispatch","useDispatch","_useSelector","useSelector","_useState","useState","_useState2","slicedToArray","setCashValue","react_default","a","createElement","className","es_select","placeholder","onChange","options","label","es_button","onClick","_calculateCashback","reverseCash","toConsumableArray","changedBalance","cashBack","debtAmount","counter","cashbackMessage","success","debtProducts","_loop","intermediateProduct","debtProduct","debtsMessage","calculateCashback","OperationComponent","CashOpertaionComponent","ShopComponent","index","id","productId","filter","_","warning","buyProduct","style","whiteSpace","CloseOutlined","empty","image","Empty","PRESENTED_IMAGE_SIMPLE","WithdrawComponent","card","title","App","useEffect","background","components_WithdrawComponent","components_ShopComponent","components_OperationComponent","container","document","getElementById","createRoot","render","StrictMode","es","src_App_0"],"mappings":"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","file":"static/js/main.099e93ca.chunk.js","sourcesContent":["import { actionType } from \"../types\";\n\nconst defaultState = {\n    products: [],\n    withdraw: [],\n    count: 1,\n    balance: 0\n};\n'setUserBalance'\nexport const machineDataReducer = (state = defaultState, action: actionType) => {\n    switch(action.type) {\n    case 'SET_PRODUCT_DATA': \n        return { ...state, products: action.payload };\n    case 'SET_MACHINE_WITHDRAW': \n        return { ...state, withdraw: action.payload };\n    case 'SET_MACHINE_BALANCE':\n        return { ...state, balance: action.payload };\n    case 'SET_PRODUCT_COUNT':\n        return { ...state, count: action.payload };\n    default:\n        return state;\n    }\n};","const initialData = {\r\n    products: [\r\n        {\r\n            name: \"Lays\",\r\n            count: 10,\r\n            price: 100\r\n        },\r\n        {\r\n            name: \"Cola\",\r\n            count: 5,\r\n            price: 50\r\n        },\r\n        {\r\n            name: \"Snickers\",\r\n            count: 20,\r\n            price: 33\r\n        },\r\n        {\r\n            name: \"Twix\",\r\n            count: 8,\r\n            price: 26\r\n        },\r\n        {\r\n            name: \"M&Ms\",\r\n            count: 13,\r\n            price: 58\r\n        },\r\n        {\r\n            name: \"Sandwiches\",\r\n            count: 5,\r\n            price: 100\r\n        },\r\n        {\r\n            name: \"Water\",\r\n            count: 10,\r\n            price: 40\r\n        },\r\n        {\r\n            name: \"Cookie\",\r\n            count: 30,\r\n            price: 20\r\n        }\r\n    ],\r\n    withdraw: [\r\n        {\r\n            value: 1,\r\n            count: 100\r\n        },\r\n        {\r\n            value: 5,\r\n            count: 50\r\n        },\r\n        {\r\n            value: 10,\r\n            count: 50\r\n        },\r\n        {\r\n            value: 50,\r\n            count: 25\r\n        },\r\n        {\r\n            value: 100,\r\n            count: 25\r\n        },\r\n        {\r\n            value: 500,\r\n            count: 10\r\n        }\r\n    ],\r\n    balance: 0\r\n}\r\n\r\nexport default initialData;","import { call, put, select, takeLatest, all, fork } from 'redux-saga/effects';\nimport { message } from 'antd';\nimport { RootState } from '../store';\nimport { payloadType } from '../types';\nimport axios from 'axios';\n\nimport initialData from '../reducers/initialData';\n\nconst serverUrlAddress = 'https://vendingmachineserver.onrender.com';\n\nfunction* getDataFromJson() {\n    try {\n        const { data } = yield call(axios.get, `${serverUrlAddress}/machine`);\n        const productCount = data.products.map((item: {name: string, price: number, count: number}) => item.count).reduce((count: number, curr: number) => count + curr, 0);\n        yield put({ type: 'SET_PRODUCT_DATA', payload: data.products });\n        yield put({ type: 'SET_MACHINE_WITHDRAW', payload: data.withdraw });\n        yield put({ type: 'SET_MACHINE_BALANCE', payload: data.balance });\n        yield put({ type: 'SET_PRODUCT_COUNT', payload: productCount });\n    } catch (e) {\n        message.error('Error!');\n    }\n}\n\nfunction* increaseMachineBalance(payload: payloadType) {\n    try {\n        const { balance, products } = yield select((state: RootState) => state.machineData);\n        yield call(axios.post, `${serverUrlAddress}/machine`, {\n            products,\n            withdraw: payload.changedWithdraw,\n            balance: balance + payload.cashValue\n        });\n        yield call(getDataFromJson);\n    } catch (e) {\n        message.error('Error');\n    }\n}\n\nfunction* decreaseMachineBalance(payload: payloadType) {\n    try {\n        const { products } = yield select((state: RootState) => state.machineData);\n        const changedProduct = payload.changedProduct.length ? payload.changedProduct : products\n        yield call(axios.post, `${serverUrlAddress}/machine`, {\n            products: changedProduct,\n            withdraw: payload.changedWithdraw,\n            balance: 0\n        });\n        yield call(getDataFromJson);\n    } catch (e) {\n        message.error('Error');\n    } \n}\n\nfunction* changeMachineProduct(payload: payloadType) {\n    try {\n        const { withdraw, balance } = yield select((state: RootState) => state.machineData);\n        yield call(axios.post, `${serverUrlAddress}/machine`, {\n            products: payload.changedProduct,\n            withdraw,\n            balance\n        });\n        yield call(getDataFromJson);\n    } catch (e) {\n        message.error('Error');\n    } \n}\n\nfunction* getProductAndChangeData(payload: payloadType) {\n    try {\n        const { balance, withdraw } = yield select((state: RootState) => state.machineData);\n        yield call(axios.post, `${serverUrlAddress}/machine`, {\n            products: payload.changedProduct,\n            withdraw,\n            balance: payload.price ? (balance - payload.price) : balance\n        });\n        yield call(getDataFromJson);\n    } catch (e) {\n        message.error('Error');\n    }  \n}\n\nfunction* resetMachineData() {\n    try {\n        yield call(axios.post, `${serverUrlAddress}/machine`, initialData);\n        yield call(getDataFromJson);\n    } catch (e) {\n        message.error('Error');\n    }  \n}\n\nexport function* machineDataSaga() {\n    yield all([\n        takeLatest('GET_MACHINE_DATA_FROM_JSON', getDataFromJson),\n        takeLatest('INCREASE_MACHINE_BALANCE', increaseMachineBalance),\n        takeLatest('DECREASE_MACHINE_BALANCE', decreaseMachineBalance),\n        takeLatest('BUY_PRODUCT', getProductAndChangeData),\n        takeLatest('CHANGE_MACHINE_PRODUCT', changeMachineProduct),\n        takeLatest('RESET_MACHINE_DATA', resetMachineData),\n    ]);\n}","import { fork, all } from 'redux-saga/effects';\nimport { machineDataSaga } from './machineDataSaga';\n\nexport default function* rootSaga() {\n    yield all([\n        fork(machineDataSaga)\n    ]);\n}","import { combineReducers } from '@reduxjs/toolkit';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { machineDataReducer } from './reducers/machineDataReducer';\nimport rootSaga from '../app/sagas/index';\n\nconst rootReducer = combineReducers({\n    machineData: machineDataReducer,\n});\n  \nconst sagaMiddleware = createSagaMiddleware();\n  \nexport const store = createStore(\n    rootReducer,\n    applyMiddleware(sagaMiddleware),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;","import { Button, Select, message } from 'antd';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { productType, withdrawType } from '../types';\n\nconst CashOperationComponent: React.FC = () => {\n    const dispatch = useDispatch();\n\n    const { withdraw, balance, products } = useSelector((state: RootState) => state.machineData);\n    const [cashValue, setCashValue] = useState(null);\n\n    const depositCash = () => {\n        if (cashValue) {\n            const changedWithdraw = withdraw.map((item: withdrawType) => (\n                item.value === cashValue ? {...item, count: item.count + 1} \n                    : (item.value * 2) === 1000 && cashValue === 1000 ? {...item, count: item.count + 2} \n                        : item\n            ))     \n            dispatch({ type: 'INCREASE_MACHINE_BALANCE', cashValue, changedWithdraw });\n        } \n    }\n\n    \n    const calculateCashback = () => {\n        const reverseCash = [...withdraw].reverse();\n        let changedBalance = balance;\n        \n        let cashBack: {value: number, count: number}[] = [];\n        let count = 0;\n        let i = 1;  \n        while (changedBalance > 0) { \n            if (changedBalance < reverseCash[count].value) {\n                count++;\n                i = 1; \n            } else if (changedBalance >= reverseCash[count].value * (i + 1)) {\n                i++\n            } else {\n                cashBack.push({value: reverseCash[count].value, count: i})\n                changedBalance -= reverseCash[count].value * i;\n                count++;\n                i = 1;\n            }\n        }\n\n        let debtAmount = balance;\n        const changedWithdraw = [...withdraw].reverse().map((item: withdrawType) => {\n            if (item.count !== 0 && debtAmount > 0 && debtAmount >= item.value) {\n                let counter = 0;\n                while (debtAmount >= item.value && counter !== item.count) {\n                    debtAmount -= item.value;\n                    counter++;\n                }\n                return {...item, count: item.count - counter}\n            }\n            return item;\n        })\n\n        if (cashBack.length > 0) {\n            let cashbackMessage = 'Вы получили ';\n            cashBack.forEach(item => (cashbackMessage = cashbackMessage + item.value + ' руб. в количестве ' + item.count + ', '));\n            message.success(cashbackMessage, 10);\n        } \n        if (debtAmount) message.success(`а также: ${debtAmount} руб. в виде:`, 10)\n\n        let changedProduct = products;\n        if (debtAmount !== 0) {\n            let debtProducts = [];\n            while (debtAmount > 0) {\n                const intermediateProduct = changedProduct;\n                let debtProduct = {price: 0, name: ''}\n                intermediateProduct.forEach((item: productType) => {\n                    if ((debtAmount > item.price || debtAmount * 2 >= item.price) && debtProduct.price < item.price && item.count !== 0) debtProduct = {price: item.price, name: item.name};\n                })\n                if (debtProduct.price === 0) {\n                    debtAmount = 0;\n                }\n                debtAmount -= debtProduct.price;\n                debtProducts.push(debtProduct)\n                changedProduct = intermediateProduct.map((item: productType) => (\n                    (item.name === debtProduct.name && item.count !== 0) ? {...item, count: item.count - 1} : item\n                ));\n            }\n            let debtsMessage = '';\n            debtProducts.forEach(item => (debtsMessage = debtsMessage + item.name + ' в количестве 1шт, '));\n            message.success(debtsMessage, 10);\n        }\n\n        return {changedWithdraw: changedWithdraw.reverse(), changedProduct}\n    }\n\n    const withdrawCash = () => {\n        if (balance !== 0) {\n            const {changedWithdraw, changedProduct } = calculateCashback();\n            dispatch({ type: 'DECREASE_MACHINE_BALANCE', changedWithdraw, changedProduct });\n        }\n    }\n\n    const cashOptions = [\n        { value: 50, label: '50' },\n        { value: 100, label: '100' },\n        { value: 500, label: '500' },\n        { value: 1000, label: '1000' },\n    ]\n\n    return (\n        <div className='operationButtons'>\n            <div className='depositCash'>\n                <Select \n                    placeholder='Выберите сумму'\n                    onChange={(value) => setCashValue(value)}\n                    options={cashOptions}\n                />\n                <Button onClick={depositCash}>Внести</Button>\n            </div>\n            <Button className='withdrawCash' onClick={withdrawCash}>Получить сдачу</Button>\n        </div>\n    );\n};\n\nexport default CashOperationComponent; ","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport CashOperationComponent from './CashOpertaionComponent';\n\nconst OperationComponent: React.FC = () => {\n\n    const balance = useSelector((state: RootState) => state.machineData.balance);\n\n    return (\n        <div className='techMenu'>\n            <div className='userIntrfaceContainer'>\n                <div className='balance'>\n                    БАЛАНС : {balance}\n                </div>\n                <div className='buyProduct'></div>\n            </div>\n            <CashOperationComponent />\n        </div>\n    );\n};\n\nexport default OperationComponent; ","import React from 'react';\n\nimport { Button, Empty, message } from 'antd';\nimport { CloseOutlined } from '@ant-design/icons';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport type { RootState } from '../store'\n\nimport { productType } from '../types';\n\nconst ShopComponent: React.FC = () => {\n    const products = useSelector((state: RootState) => state.machineData.products);\n    const balance = useSelector((state: RootState) => state.machineData.balance);\n\n    const dispatch = useDispatch();\n\n    const buyProduct = (id: number, price: number) => {\n        if (balance >= price) {\n            const changedProduct = products.map((item: productType, index: number) => (\n                index === id ? {name: item.name, count: item.count - 1, price: item.price} : item\n            ))       \n            dispatch({ type: 'BUY_PRODUCT', productId: id, price, changedProduct});\n            message.success(`Вы купили ${products.filter((_: any, index: number) => index === id)[0].name}`);  \n        } else {\n            message.warning('Недостаточно средств для покупки, пополните баланс!');\n        }\n    }\n\n    return (\n        <div className='shopContainer'>\n            {products.length ?\n                products.map((item: productType, index: number) => (\n                    <div key={index} className='shopShelf'>\n                        {item.count !== 0 ?\n                        <Button onClick={() => buyProduct(index, item.price)}>\n                            <span style={{\"whiteSpace\": \"pre-line\"}}>\n                                {\n                                    `${item.name}\n                                    Стоимость: ${item.price}\n                                    Осталось: ${item.count} шт.`\n                                }\n                            </span>\n                        </Button>\n                        :\n                        <div className='noProduct' >\n                            <CloseOutlined className='noProductIcon'/>\n                            <span>Нет в наличии</span>\n                        </div>}\n                    </div>\n                ))\n            :\n                <div className='noProduct dataBaseError'>\n                    <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default ShopComponent; ","import { Card } from 'antd';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { withdrawType } from '../types';\n\nconst WithdrawComponent: React.FC = () => {\n    const withdraw: withdrawType[] = useSelector((state: RootState) => state.machineData.withdraw);\n\n    return (\n        <Card title=\"Валюта автомата\" className='withdrawCard'>\n            {withdraw.map((item, index) => (\n                <div key={index}>Номинал: {item.value}, количетсво: {item.count}</div>\n            ))}\n        </Card>\n    );\n};\n\nexport default WithdrawComponent; ","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'antd';\n\nimport './App.css';\n\nimport OperationComponent from './app/components/OperationComponent';\nimport ShopComponent from './app/components/ShopComponent';\nimport WithdrawComponent from './app/components/WithdrawComponent';\nimport { RootState } from './app/store';\n\nconst App: React.FC = (): JSX.Element => {\n    const dispatch = useDispatch();\n\n    const count = useSelector((state: RootState) => state.machineData.count);\n    \n    useEffect(() => {\n        dispatch({ type: 'GET_MACHINE_DATA_FROM_JSON' });\n    }, []);\n\n    const resetMchineData = () => {\n        dispatch({ type: 'RESET_MACHINE_DATA' });\n    }\n\n    return (\n        <div className='App'>\n            <div className='adminPanel'>\n                <Button type='primary' style={count === 0 ? {background: 'red'} : {background: 'grey'}} onClick={() => resetMchineData()}>\n                    Обновить магазин\n                </Button>\n            </div>\n            <div className='container'>\n                <WithdrawComponent />\n                <div className='ATMContainer'>\n                    <ShopComponent />\n                    <OperationComponent />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport App from './App';\nimport './index.css';\n\nconst container = document.getElementById('root')!;\nconst root = createRoot(container);\n\nroot.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);"],"sourceRoot":""}